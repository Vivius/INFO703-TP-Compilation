/* Package et imports */
package fr.usmb.m1isc.compilation.tp34;
import java_cup.runtime.Symbol;

/* Inclusion du code */

action code {: 
    // Pour utilisation dans les actions (classe action)
	private boolean erreur = false;
:};

 
parser code {:
    // Pour le parser (redéfinition de la méthode reportant les erreurs d'analyse)
  public void report_error(String message, Object info) {
 	String m = "";
 	if (info instanceof java_cup.runtime.Symbol) {
 	    Symbol s = ((Symbol) info); 	
 		if (s != null && s.left >= 0 ) {
 			/* Ajoute le numero de ligne  et de colonne*/
 			m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
 			}
 		}
 	m = m + message;
    System.err.println(m);
    }
:};

 init with {:
    //	Initialisation du parser
:};

/* Symboles terminaux */
terminal PLUS, MOINS, MOINS_UNAIRE, MUL, DIV, MOD, PAR_G, PAR_D, SEMI, DOT, ERROR, LET, IF, THEN, ELSE, WHILE, DO, NOT, AND, OR, EQUALS, INF, INF_EQUALS, NIL, OUTPUT, INPUT;
terminal Integer ENTIER;
terminal String IDENT, CST;

/* Non terminaux */
non terminal Arbre programme, expression;

/* Priorités */
precedence left SEMI;
precedence left WHILE, DO, IF, THEN, ELSE;
precedence left OUTPUT, INPUT;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left EQUALS, INF, INF_EQUALS;
precedence left PLUS, MOINS;
precedence left MUL, DIV, MOD;
precedence left MOINS_UNAIRE;
precedence left ENTIER, IDENT, CST, NIL;

/* Grammaire */

// Un programme termine par un point (DOT).
programme	::= expression:e DOT                                        {: RESULT = e; :}
			  ;

// Ensemble des expressions reconnues par le langage lambada.
expression 	::=
              // Structuration des expressions
              // Les expressions sont séparées par un point virgule (SEMI)
                expression:e1 SEMI expression:e2                        {: RESULT = new Arbre(Type.SEMI, e1, e2); :}
              // Les expressions peuvent être parenthésées.
              | PAR_G expression:e PAR_D                                {: RESULT = e ; :}

              // Assignation
              | LET IDENT:i EQUALS expression:e                         {: RESULT = new Arbre(Type.LET, new FeuilleString(i, Type.IDENT), e); :}

              // Structures conditionnelles
              | IF expression:cond THEN expression:t ELSE expression:f  {: RESULT = new Arbre(Type.IF, cond, new Arbre(Type.THEN, t, f)); :}
              | WHILE expression:cond DO expression:body                {: RESULT = new Arbre(Type.WHILE, cond, body); :}

              // Opérations arithmétiques
			  | expression:e1 PLUS expression:e2                        {: RESULT = new Arbre(Type.PLUS, e1, e2) ; :}
			  | expression:e1 MOINS expression:e2                       {: RESULT = new Arbre(Type.MOINS, e1, e2) ; :}
              | MOINS expression:e   	                                {: RESULT = new Arbre(Type.MOINS_UNAIRE, e, null) ; :} 	%prec MOINS_UNAIRE
			  | expression:e1 MUL expression:e2                         {: RESULT = new Arbre(Type.MUL, e1, e2); :}
              | expression:e1 DIV expression:e2                         {: RESULT = new Arbre(Type.DIV, e1, e2); :}
              | expression:e1 MOD expression:e2                         {: RESULT = new Arbre(Type.MOD, e1, e2); :}

              // Opérations booléennes
			  | expression:e1 INF expression:e2                         {: RESULT = new Arbre(Type.INF, e1, e2); :}
			  | expression:e1 INF_EQUALS expression:e2                  {: RESULT = new Arbre(Type.INF_EQUALS, e1, e2); :}
			  | expression:e1 EQUALS expression:e2                      {: RESULT = new Arbre(Type.EQUALS, e1, e2); :}
			  | expression:e1 AND expression:e2                         {: RESULT = new Arbre(Type.AND, e1, e2); :}
			  | expression:e1 OR expression:e2                          {: RESULT = new Arbre(Type.OR, e1, e2); :}
			  | NOT expression:e                                        {: RESULT = new Arbre(Type.NOT, e, null); :}

              // Elements divers
              | ENTIER:e                                                {: RESULT = new FeuilleInteger(e, Type.ENTIER) ; :}
              | IDENT:e                                                 {: RESULT = new FeuilleString(e, Type.IDENT); :}
              | CST:e                                                   {: RESULT = new FeuilleString(e, Type.CST); :}
              | NIL                                                     {: RESULT = new Arbre(Type.NIL); :}
              | INPUT                                                   {: RESULT = new Arbre(Type.INPUT); :}
              | OUTPUT expression:e                                     {: RESULT = new Arbre(Type.OUTPUT, e, null); :}
			  ;
